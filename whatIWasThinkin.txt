Начал делать компонент QueryBuilder, решил начать с него, а не с базы данных, чтобы визуализировать функции, 
которые будем "дергать" в проекте, независимо от его содержания. Создал этот компонент, чтобы сделать его 
максимально независимым и не привязывать к конкретной реализации, пришлось прибегать к различным встроенным 
функциям (например, для получения строки из массива), что усложняло создание кода.

Приступил к созданию соединения с БД, нашел неудобным разделение на данные для соединения (config.php), 
создание pdo (connection.php) и соединения их с классом построителя запросов (QueryBuilder.php).
Я понимаю, что это нужно для максимальной универсальности, делегирования и единой ответственности, 
инъекций зависимостей, но всё это неудобно и создает условия для погрешностей и человеческого фактора - 
лучше использовать готовый и протестированный сообществом компонент.

Создал config.php, прописал в него данные моего сервера БД; это сделано для разделения ответственности 
и удобства изменения конфигураций подключения к БД при необходимости.

Создал скрипт start.php для создания объекта построителя запросов, куда подключил config.php, Connection.php 
и QueryBuilder.php - реализовал dependensy injection, разделив конфигурацию, подключение к БД и построитель запросов, 
передав каждый компонент другому, ожидающему его на входе.

Создал директорию database/ и перенес в неё все файлы, которые отвечают за работу с БД (config.php, Connection.php, 
QueryBuilder.php и start.php). Неудобство станет возникать с правильным вызовом этих компонентов, 
так как они теперь не в корне проекта и за этим будет необходимо следить - минус собственной разработки компонентов, 
пришлось прописывать магическую константу __DIR__.

Создал директорию userPages/, в которой будут находиться модели построения страниц, 
которые затем будут выводиться пользоватеям в index.php. Например, home.php покажет все записи блога, 
а users.php выведет всех зарегистрированных пользователей нашего сайта, about.php покажет информацию о нас, 
а contacts.php отобразит наши контакты.

Создал файл home.php, в котором подключил скрипт start.php и присвоил результаты его работы переменной $db, 
вызвал метод getAll у объекта в переменной $db и подключил страницу index.view.php (страницу не создавал, 
так как по условию задания было необходимо создать универсальные компоненты без привязки к конкретной реализации).

Создал скрипт router.php, директорию public/ и перенес туда этот скрипт. Таким образом делаем единую точку входа для 
пользователей на наш сайт. В router.php подключил файл functions.php с функцией dd(), чтобы можно было проверять 
получаемые данные при тестирвоании маршрутизации.

Также создал, по аналогии с уроками, файл functions.php, где прописал функцию dd(), для вардампа переменных 
и др. сущностей, чтобы можно было осуществлять проверки и тестирование.

Начал делать класс для flash-сообщений, решил сделать классом со статичными методами. 
Думал, как лучше: классом или отдельными функциями. Несмотря на то, что принял решение - сомневаюсь.

Запутался с .htaccess'ами... Так и не распутался...:(

Сделал класс Validator, пришлось повозиться, и я не уверен, что сделал правильно...
Очень неудобно его реализовывать и прописывать все проверки.
Гораздо удобнее было бы использовать готовые компоненты.

Описал я документацию API, все функции, классы, объекты и так далее. Да, работы прямо очень много, 
что-то является ну просто рутиной, которую можно заменить готовыми компонентами, не изобретая велосипеда. 
Описание API очень помогает, систематизирует свою работу, и поможет пользователю работать с компонентами. 
Хорошая документация поможет и мне пользоваться как своими, так и подключаемыми компонентами.

Честно говоря, я и readme-файл замучился делать после всего вышеперечисленного:)